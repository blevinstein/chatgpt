Parameters:
  EnvironmentName:
    Description: The environment name (e.g., dev, prod, staging)
    Type: String
  VpcId:
    Description: VPC that allows access to the Internet.
    Type: AWS::EC2::VPC::Id
  Subnet1:
    Description: First subnet
    Type: AWS::EC2::Subnet::Id
  Subnet2:
    Description: Second subnet
    Type: AWS::EC2::Subnet::Id

Resources:
  WhisperGptCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub whisper-gpt-cluster-${EnvironmentName}

  WhisperGptTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      NetworkMode: awsvpc
      Cpu: 256
      Memory: 512
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Sub whisper-gpt-container-${EnvironmentName}
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/whisper-gpt-dev:latest
          MemoryReservation: 512
          PortMappings:
            - ContainerPort: 3000
          Essential: true
          StartTimeout: 60
          Environment: # TODO: Use secrets manager instead
            - Name: OPENAI_KEY
              Value: "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"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs

  WhisperGptService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub whisper-gpt-service-${EnvironmentName}
      Cluster: !Ref WhisperGptCluster
      TaskDefinition: !Ref WhisperGptTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref SecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: !Sub whisper-gpt-container-${EnvironmentName}
          ContainerPort: 3000

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ECSTaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: AccessSecretsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:openai-key-*
        - PolicyName: AccessECRPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/whisper-gpt-dev
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/whisper-gpt-${EnvironmentName}

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          FromPort: -1
          ToPort: -1

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub whisper-gpt-target-${EnvironmentName}
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckProtocol: HTTP
      HealthCheckPort: 'traffic-port'
      HealthCheckPath: /health-check
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  # Add new rule to existing ELB Listener
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: arn:aws:elasticloadbalancing:us-east-1:426523829637:listener/app/avaxbridgeapes-elb/ce9e65b759c5db65/c129a57b7facf391
      Priority: 1
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - "synaptek.bio"
              - "www.synaptek.bio"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  WhisperGptDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub WhisperGpt-${EnvironmentName}
      DashboardBody: !Sub
        - '{
            "widgets": [
              {
                "height": 6,
                "width": 6,
                "y": 0,
                "x": 6,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [
                      "AWS/ECS",
                      "CPUUtilization",
                      "ServiceName",
                      "whisper-gpt-service-${EnvironmentName}",
                      "ClusterName",
                      "whisper-gpt-cluster-${EnvironmentName}"
                    ],
                    [
                      "...",
                      {
                        "stat": "Average"
                      }
                    ]
                  ],
                  "legend": {
                    "position": "bottom"
                  },
                "region": "${AWS::Region}",
                  "liveData": false,
                  "title": "CPUUtilization",
                  "view": "timeSeries",
                  "stacked": false,
                  "period": 900,
                  "yAxis": {
                    "left": {
                      "min": 0,
                      "showUnits": true
                    }
                  },
                  "stat": "Maximum"
                }
              },
              {
                "height": 6,
                "width": 6,
                "y": 0,
                "x": 12,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [
                      "AWS/ECS",
                      "MemoryUtilization",
                      "ServiceName",
                      "whisper-gpt-service-${EnvironmentName}",
                      "ClusterName",
                      "whisper-gpt-cluster-${EnvironmentName}"
                    ],
                    [
                      "...",
                      {
                        "stat": "Average"
                      }
                    ]
                  ],
                  "legend": {
                    "position": "bottom"
                  },
                  "region": "${AWS::Region}",
                  "liveData": false,
                  "title": "MemoryUtilization",
                  "view": "timeSeries",
                  "stacked": false,
                  "period": 900,
                  "yAxis": {
                    "left": {
                      "min": 0
                    }
                  },
                  "stat": "Maximum"
                }
              },
              {
                "height": 6,
                "width": 6,
                "y": 6,
                "x": 6,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [
                      "AWS/ApplicationELB",
                      "HealthyHostCount",
                      "TargetGroup",
                      "${TargetGroupName}",
                      "LoadBalancer",
                      "app/avaxbridgeapes-elb/ce9e65b759c5db65",
                      {
                        "stat": "Maximum"
                      }
                    ],
                    [
                      "..."
                    ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "Dev Healthy Hosts",
                  "period": 300,
                  "stat": "Minimum",
                  "yAxis": {
                    "left": {
                      "min": 0
                    }
                  }
                }
              },
              {
                "height": 6,
                "width": 24,
                "y": 18,
                "x": 0,
                "type": "log",
                "properties": {
                  "query": "SOURCE ''/ecs/whisper-gpt-${EnvironmentName}'' | fields @timestamp, @message\n| filter @message not like /.*\"GET \\/health-check HTTP\\/1.1\" 200 .*/\n| sort @timestamp desc\n| limit 1000",
                  "region": "${AWS::Region}",
                  "title": "Log group: /ecs/whisper-gpt-${EnvironmentName}",
                  "view": "table"
                }
              },
              {
                "height": 6,
                "width": 6,
                "y": 6,
                "x": 18,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [
                      "AWS/ApplicationELB",
                      "HTTPCode_Target_5XX_Count",
                      "TargetGroup",
                      "${TargetGroupName}",
                      "LoadBalancer",
                      "app/avaxbridgeapes-elb/ce9e65b759c5db65"
                    ],
                    [
                      ".",
                      "HTTPCode_Target_4XX_Count",
                      ".",
                      ".",
                      ".",
                      "."
                    ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "Error Responses",
                  "period": 21600,
                  "stat": "Sum",
                  "yAxis": {
                    "left": {
                      "min": 0
                    }
                  }
                }
              },
              {
                "height": 6,
                "width": 6,
                "y": 0,
                "x": 0,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [
                      "AWS/ApplicationELB",
                      "TargetResponseTime",
                      "TargetGroup",
                      "${TargetGroupName}",
                      "LoadBalancer",
                      "app/avaxbridgeapes-elb/ce9e65b759c5db65"
                    ],
                    [
                      "...",
                      {
                        "stat": "Average"
                      }
                    ],
                    [
                      "...",
                      {
                        "stat": "p95"
                      }
                    ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "Response Time",
                  "period": 3600,
                  "stat": "p99",
                  "yAxis": {
                    "right": {
                      "showUnits": true
                    }
                  }
                }
              },
              {
                "height": 6,
                "width": 6,
                "y": 6,
                "x": 0,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [
                      "AWS/ApplicationELB",
                      "HealthyHostCount",
                      "TargetGroup",
                      "${TargetGroupName}",
                      "LoadBalancer",
                      "app/avaxbridgeapes-elb/ce9e65b759c5db65",
                      {
                        "stat": "Maximum"
                      }
                    ],
                    [
                      "..."
                    ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "Healthy Hosts",
                  "period": 300,
                  "stat": "Minimum"
                }
              },
              {
                "height": 6,
                "width": 6,
                "y": 0,
                "x": 18,
                "type": "metric",
                "properties": {
                  "metrics": [
                    [
                      "AWS/ApplicationELB",
                      "RequestCount",
                      "TargetGroup",
                      "${TargetGroupName}",
                      "LoadBalancer",
                      "app/avaxbridgeapes-elb/ce9e65b759c5db65"
                    ],
                    [
                      ".",
                      "HTTPCode_Target_4XX_Count",
                      ".",
                      ".",
                      ".",
                      "."
                    ],
                    [
                      ".",
                      "HTTPCode_Target_5XX_Count",
                      ".",
                      ".",
                      ".",
                      "."
                    ]
                  ],
                  "view": "timeSeries",
                  "stacked": false,
                  "region": "${AWS::Region}",
                  "title": "RequestCount",
                  "period": 900,
                  "stat": "Sum",
                  "yAxis": {
                    "left": {
                      "min": 0
                    }
                  }
                }
              }
            ]
          }'
        - TargetGroupName: !Select [5, !Split [":", !Ref TargetGroup]]
